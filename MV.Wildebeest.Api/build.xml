<?xml version="1.0"?>
<!--

	Wildebeest Migration Framework
	Copyright Â© 2013 - 2018, Matheson Ventures Pte Ltd

	This file is part of Wildebeest

	Wildebeest is free software: you can redistribute it and/or modify it under
	the terms of the GNU General Public License v2 as published by the Free
	Software Foundation.

	Wildebeest is distributed in the hope that it will be useful, but WITHOUT ANY
	WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
	A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

	You should have received a copy of the GNU General Public License along with
	Wildebeest.  If not, see http://www.gnu.org/licenses/gpl-2.0.html

-->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="MV.Wildebeest.Api" default="run">

	<target
		name="meta.project.properties"
		description="
			Derives additional project meta information from that loaded from
			project.xml">

		<!--
			Load Raw Properties
		-->

		<property file="project.override.properties" />
		<property file="../project.override.properties" />
		<property file="../../project.override.properties" />
		<xmlproperty file="project.xml" prefix="meta" />
		<xmlproperty file="../project.xml" prefix="meta" />
		<xmlproperty file="../../project.xml" prefix="meta" />

		<!--
			Derive the project's id
		-->

		<property
			name="meta.project.identity.id"
			value="${meta.project.identity.organization.id}.${meta.project.identity.name}" />

		<property
			name="meta.project.version.full.dotted"
			value="${meta.project.version.major}.${meta.project.version.minor}.${meta.project.version.revision}.${meta.project.version.build}" />
		<property
			name="meta.project.version.full.underscored"
			value="${meta.project.version.major}_${meta.project.version.minor}_${meta.project.version.revision}_${meta.project.version.build}" />

		<!--
			Derive the projects version name
		-->
		<property name="meta.project.version.name" value="${meta.project.identity.id}-${meta.project.version.full.dotted}" />

	</target>

	<target name="meta.project.properties:echo" depends="meta.project.properties">

		<echo message="" />

		<echo message="Project Meta Information" />
		<echo message="------------------------" />
		<echo message="" />
		<echo message="+ meta.project.type: ${meta.project.type}" />
		<echo message="" />

		<echo message="Identity:" />
		<echo message="+ meta.project.identity.id: ${meta.project.identity.id}" />
		<echo message="+ meta.project.identity.organization.id: ${meta.project.identity.organization.id}" />
		<echo message="+ meta.project.identity.organization.name: ${meta.project.identity.organization.name}" />
		<echo message="+ meta.project.identity.name: ${meta.project.identity.name}" />
		<echo message="+ meta.project.identity.title: ${meta.project.identity.title}" />
		<echo message="+ meta.project.identity.url: ${meta.project.identity.url}" />
		<echo message="" />

		<echo message="Copyright:" />
		<echo message="+ meta.project.copyright.years: ${meta.project.copyright.years}" />
		<echo message="+ meta.project.copyright.owner: ${meta.project.copyright.owner}" />
		<echo message="" />

		<echo message="Version:" />
		<echo message="+ meta.project.version.major: ${meta.project.version.major}" />
		<echo message="+ meta.project.version.minor: ${meta.project.version.minor}" />
		<echo message="+ meta.project.version.revision: ${meta.project.version.revision}" />
		<echo message="+ meta.project.version.full.dotted: ${meta.project.version.full.dotted}" />
		<echo message="+ meta.project.version.full.underscored: ${meta.project.version.full.underscored}" />
		<echo message="+ meta.project.version.name: ${meta.project.version.name}" />
		<echo message="" />

	</target>

	<target name="meta.component.properties" depends="meta.project.properties">

		<!--
			Load raw properties
		-->
		<xmlproperty file="component.xml" prefix="meta" />

		<property
			name="meta.component.identity.id"
			value="${meta.project.identity.id}.${meta.component.identity.name}" />
		<property
			name="meta.component.version.name"
			value="${meta.component.identity.id}-${meta.project.version.full.dotted}" />

	</target>

	<target name="meta.component.properties:echo" depends="meta.component.properties">

		<echo message="" />

		<echo message="Component Meta Information" />
		<echo message="--------------------------" />
		<echo message="" />

		<echo message="Identity:" />
		<echo message="+ meta.component.identity.name: ${meta.component.identity.name}" />
		<echo message="+ meta.component.identity.title: ${meta.component.identity.title}" />
		<echo message="+ meta.component.identity.id: ${meta.component.identity.id}" />
		<echo message="" />

		<echo message="Version:" />
		<echo message="+ meta.component.version.name: ${meta.component.version.name}" />
		<echo message="" />

	</target>

  <target name="meta.properties" depends="meta.project.properties,meta.component.properties">

    <!--
  		Meta Information Properties
  	-->
    <property name="meta.core.jar.filename"
  		value="${meta.component.identity.id}-${meta.project.version.full.dotted}.jar" />
  	<property name="meta.test.jar.filename"
  		value="${meta.component.identity.id}-test-${meta.project.version.full.dotted}.jar" />

  </target>

  <target name="structure.properties">

    <!--
      Build Resource Properties
    -->
    <property name="buildres.ivy.version" value="2.4.0" />

    <!--
      Source Properties
    -->
    <property name="source" value="source" />

    <!-- Core Sources -->
    <property name="source.core" value="${source}/core" />
    <property name="source.core.libcompile" value="${source.core}/libcompile" />
    <property name="source.core.libcompileandrun" value="${source.core}/libcompileandrun" />
    <property name="source.core.librun" value="${source.core}/librun" />
    <property name="source.core.java" value="${source.core}/java" />
    <property name="source.core.importclasses" value="${source.core}/importclasses" />
    <property name="source.core.resources" value="${source.core}/resources" />

    <!-- Test Sources -->
    <property name="source.test" value="${source}/test" />
    <property name="source.test.libcompile" value="${source.test}/libcompile" />
    <property name="source.test.libcompileandrun" value="${source.test}/libcompileandrun" />
    <property name="source.test.librun" value="${source.test}/librun" />
    <property name="source.test.java" value="${source.test}/java" />

    <!--
			Target Properties
		-->
		<property name="target" value="target" />

    <!-- Core  Targets -->
    <property name="target.core" value="${target}/core" />
    <property name="target.core.libcompile" value="${target.core}/libcompile" />
    <property name="target.core.librun" value="${target.core}/librun" />
    <property name="target.core.java" value="${target.core}/java" />
    <property name="target.core.classtree" value="${target.core}/classtree" />
    <property name="target.core.jar" value="${target.core}/jar" />
    <property name="target.core.javadoc" value="${target.core}/javadoc" />

    <!-- Test Targets -->
    <property name="target.test" value="${target}/test" />
    <property name="target.test.libcompile" value="${target.test}/libcompile" />
    <property name="target.test.librun" value="${target.test}/librun" />

    <!-- Build Resource Targets -->
		<property name="target.buildres" value="${target}/buildres" />
    <property name="target.buildres.ivy" value="${target.buildres}/ivy" />

    <!--
      Special Properties
    -->
    <property name="special.project.repo" value="../repo" />

  </target>


<!-- ===================================================================================================================

	Core Targets

==================================================================================================================== -->

  <target name="core.libcompile" depends="structure.properties,taskdef.ivy">

    <mkdir dir="${target.core.libcompile}" />

    <!-- Retrieve Ivy-managed dependencies -->
    <ivy:retrieve conf="clc" pattern="${target.core.libcompile}/[artifact].[ext]"/>

    <!-- Retrieve VCS-committed Dependencies -->
    <copy todir="${target.core.libcompile}">
      <fileset dir="${source.core.libcompile}">
        <exclude name=".gitignore" />
      </fileset>
    </copy>

    <copy todir="${target.core.libcompile}">
      <fileset dir="${source.core.libcompileandrun}">
        <exclude name=".gitignore" />
      </fileset>
    </copy>

  </target>

  <target name="core.librun" depends="structure.properties,taskdef.ivy">

    <mkdir dir="${target.core.librun}" />

    <ivy:retrieve conf="clr" pattern="${target.core.librun}/[artifact].[ext]"/>

    <!-- Retrieve VCS-committed Dependencies -->
    <copy todir="${target.core.librun}">
      <fileset dir="${source.core.librun}">
        <exclude name=".gitignore" />
      </fileset>
    </copy>

    <copy todir="${target.core.librun}">
      <fileset dir="${source.core.libcompileandrun}">
        <exclude name=".gitignore" />
      </fileset>
    </copy>

  </target>

	<target
		name="core.java"
		description="
			Prepares the Java sources for compilation"
		depends="structure.properties">

		<mkdir dir="${target.core.java}" />

		<!--
			Import Java sources with filtering
		-->
		<filter token="meta.project.identity.name" value="${meta.project.identity.name}" />
		<filter token="meta.project.identity.title" value="${meta.project.identity.title}" />
		<filter token="meta.project.copyright.years" value="${meta.project.copyright.years}" />
		<filter token="meta.project.copyright.owner" value="${meta.project.copyright.owner}" />
		<filter token="meta.project.version.full.dotted" value="${meta.project.version.full.dotted}" />

		<copy
			todir="${target.core.java}"
			filtering="true"
			preservelastmodified="true">
			<fileset dir="${source.core.java}">
				<include name="**/*.java" />
			</fileset>
		</copy>

	</target>

	<target
		name="core.classtree"
		description="
			Create the target directory and compile the java code into classes."
		depends="structure.properties,meta.component.properties,core.libcompile,core.java">

		<mkdir dir="${target.core.classtree}" />

		<!-- Compile the core java source code -->
		<javac
			srcdir="${target.core.java}"
			destdir="${target.core.classtree}"
			source="${meta.component.type.java.source}"
			target="${meta.component.type.java.target}"
			debug="true">

			<classpath>
				<fileset dir="${target.core.libcompile}" includes="*.jar" />
			</classpath>

		</javac>

		<!-- Import the core.importclasses source -->
		<copy
			todir="${target.core.classtree}"
			preservelastmodified="true">
			<fileset dir="${source.core.importclasses}">
				<include name="**/*" />
				<include name="**/*.*" />
				<exclude name="**/*.swp" />
			</fileset>
		</copy>

		<!-- Import and native2ascii the core.resources source -->
		<native2ascii
			encoding="UTF-8"
			src="${source.core.resources}"
			dest="${target.core.classtree}"
			includes="**/resources*.utf8"
			ext=".properties">
		</native2ascii>

	</target>

	<target
		name="core.jar"
		description="
			Builds a JAR file for the core.classtree artifact."
		depends="structure.properties,meta.properties,core.classtree">

		<mkdir dir="${target.core.jar}" />

		<jar destfile="${target.core.jar}/${meta.core.jar.filename}"
			basedir="${target.core.classtree}" />

	</target>

	<target
		name="core.jar:pub-project"
		depends="structure.properties,meta.component.properties,core.jar">

    <ivy:settings id="ivysettings" file="ivysettings.xml" />

    <ivy:publish
      settingsRef="ivysettings"
      pubrevision="${meta.project.version.full.dotted}"
      status="release"
      resolver="project"
      overwrite="true">

      <artifacts pattern="${target.core.jar}/[organization].[module]-[revision].[ext]"/>

    </ivy:publish>

	</target>

	<target
		name="core.javadoc"
		description="Builds javadoc for the core system."
		depends="structure.properties,meta.component.properties">

		<mkdir dir="${target.core.javadoc}" />

		<javadoc
			sourcepath="${source.core.java}"
			destdir="${target.core.javadoc}"
			source="${meta.component.type.java.source}">

			<fileset dir="${source.core.java}" includes="**/*.java" />

		</javadoc>

	</target>


<!-- ===================================================================================================================

	Test Targets

==================================================================================================================== -->

  <target name="test.libcompile" depends="structure.properties,taskdef.ivy">

    <mkdir dir="${target.test.libcompile}" />

    <ivy:retrieve conf="tlc" pattern="${target.test.libcompile}/[artifact].[ext]"/>

    <!-- Retrieve VCS-committed Dependencies -->
    <copy todir="${target.test.libcompile}">
      <fileset dir="${source.test.libcompile}">
        <exclude name=".gitignore" />
      </fileset>
    </copy>

    <copy todir="${target.test.libcompile}">
      <fileset dir="${source.test.libcompileandrun}">
        <exclude name=".gitignore" />
      </fileset>
    </copy>

  </target>

  <target name="test.librun" depends="structure.properties,taskdef.ivy">

    <mkdir dir="${target.test.librun}" />

    <ivy:retrieve conf="tlc" pattern="${target.test.librun}/[artifact].[ext]"/>

    <!-- Retrieve VCS-committed Dependencies -->
    <copy todir="${target.test.librun}">
      <fileset dir="${source.test.librun}">
        <exclude name=".gitignore" />
      </fileset>
    </copy>

    <copy todir="${target.test.librun}">
      <fileset dir="${source.test.libcompileandrun}">
        <exclude name=".gitignore" />
      </fileset>
    </copy>

  </target>


<!-- ===================================================================================================================

	Utility Targets

==================================================================================================================== -->

  <target
		name="clean"
		description="Blow away all targets, leaving only sources."
		depends="structure.properties">

		<delete dir="${target}" />

	</target>

  	<target name="cleanrepo" depends="structure.properties">

  		<delete dir="${special.project.repo}" />

  	</target>

<!-- ===================================================================================================================

	Build Resource Targets

==================================================================================================================== -->

  <!--
    Determine the home for ivy.  If an IVY_HOME has been explicity set, then use that.  Otherwise we'll use do a local
    Ivy deployment into the project-level buildres directory.

    Also set exactly one of these two flags:
    - buildres.ivy.global - if a global Ivy deployment is identified by env.IVY_HOME
    - buildres.ivy.local - if we're doing a local Ivy deploy into the project
  -->
  <target name="properties.buildres.ivy.home" depends="structure.properties">

    <condition property="buildres.ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME" />
    </condition>

    <condition property="buildres.ivy.global" value="true">
      <isset property="env.IVY_HOME" />
    </condition>

    <property name="buildres.ivy.home" value="${target.buildres.ivy}" />
    <condition property="buildres.ivy.local" value="true">
      <not><isset property="env.IVY_HOME" /></not>
    </condition>

    <echo message="buildres.ivy.home: ${buildres.ivy.home}" />
    <echo message="buildres.ivy.global: ${buildres.ivy.global}" />
    <echo message="buildres.ivy.local: ${buildres.ivy.local}" />

  </target>

  <!--
    Sets a flag to indicate if the JAR for the local project-level Ivy deploy already exists.  Enables buildres.ivy to
    be skipped if there's no need to download.
  -->
  <target name="buildres.ivy.exists" depends="structure.properties">
    <available property="buildres.ivy.exists" file="${target.buildres.ivy}/lib/ivy-${buildres.ivy.version}.jar" />
  </target>

  <!--
    Downloads the Ivy JAR to the local project-level deployment location.
  -->
  <target name="buildres.ivy"
    depends="
      structure.properties,
      properties.buildres.ivy.home,
      buildres.ivy.exists"
    if="buildres.ivy.local"
    unless="buildres.ivy.exists">

    <mkdir dir="${target.buildres.ivy}/lib"/>

    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${buildres.ivy.version}/ivy-${buildres.ivy.version}.jar"
         dest="${target.buildres.ivy}/lib/ivy-${buildres.ivy.version}.jar" usetimestamp="true"/>

  </target>

  <!--
    Ensure the Ivy task is loaded, regardless of whether the JAR is from a global deployment or from our local
    project-level deployment.
  -->
  <target name="taskdef.ivy" depends="buildres.ivy">

    <path id="taskdef.ivy.path">
      <fileset dir="${buildres.ivy.home}/lib" includes="*.jar"/>
    </path>

    <taskdef
      resource="org/apache/ivy/ant/antlib.xml"
      uri="antlib:org.apache.ivy.ant" classpathref="taskdef.ivy.path"/>

  </target>

</project>
